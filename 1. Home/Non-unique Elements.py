# -*- coding: UTF-8 -*-

'''
http://www.checkio.org/mission/non-unique-elements/

Дан непустой массив целых чисел (X).
В этой задаче вам нужно вернуть массив, состоящий только из неуникальных элементов данного массива.
Для этого необходимо удалить все уникальные элементы (которые присутствуют в данном массиве только один раз).
Для решения этой задачи не меняйте оригинальный порядок элементов.
Пример: [1, 2, 3, 1, 3], где 1 и 3 неуникальные элементы и результат будет [1, 3, 1, 3].


Вх. данные: Список (list) целых чисел (int).

Вых. данные: Список (list) целых чисел (int).

Пример:

checkio([1, 2, 3, 1, 3]) == [1, 3, 1, 3]

checkio([1, 2, 3, 4, 5]) == []

checkio([5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5]

checkio([10, 9, 10, 10, 9, 8]) == [10, 9, 10, 10, 9]


Как это используется: Эта задача поможет вам понять, как манипулировать массивами.
Это полезный базис для решения более сложных задач. Также эта идея может быть легко обобщена для реальных задач.
Для примера: если вам необходимо очистить статистику от редко встречающихся элементов (шум).

Предусловия:
0 < len(data) < 1000
'''


def checkio(data):
    for number in data[:]:
        if data.count(number) == 1:
            data.remove(number)
    return data



if __name__ == "__main__":
    #These "asserts" using only for self-checking and not necessary for auto-testing
    assert isinstance(checkio([1]), list), "The result must be a list"
    assert checkio([1, 2, 3, 1, 3]) == [1, 3, 1, 3], "1st example"
    assert checkio([1, 2, 3, 4, 5]) == [], "2nd example"
    assert checkio([5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5], "3rd example"
    assert checkio([10, 9, 10, 10, 9, 8]) == [10, 9, 10, 10, 9], "4th example"